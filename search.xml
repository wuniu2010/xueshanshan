<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[webpack 多页面支持]]></title>
      <url>http://xueshanshan.com/2017/03/06/webpack-%E5%A4%9A%E9%A1%B5%E9%9D%A2%E6%94%AF%E6%8C%81/</url>
      <content type="html"><![CDATA[<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h5 id="安装webpack包"><a href="#安装webpack包" class="headerlink" title="安装webpack包"></a>安装webpack包</h5><blockquote>
<p>npm install webpack -g</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//进入项目目录</div><div class="line">//确定已有package.json，没有就npm init 创建</div><div class="line">$ npm install webpack --save-dev</div><div class="line">//查看webpack 版本信息</div><div class="line">$ npm info webpack</div><div class="line">//安装指定版本</div><div class="line">$ npm install webpack@1.31.x --save-dev</div></pre></td></tr></table></figure>
<h5 id="安装webpack服务器"><a href="#安装webpack服务器" class="headerlink" title="安装webpack服务器"></a>安装webpack服务器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>
<h6 id="webpack常用命令"><a href="#webpack常用命令" class="headerlink" title="webpack常用命令"></a>webpack常用命令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ webpack --config webpack.min.js //另一份配置文件</div><div class="line"></div><div class="line">$ webpack --display-error-details //显示异常信息</div><div class="line"></div><div class="line">$ webpack --watch   //监听变动并自动打包</div><div class="line"> </div><div class="line">$ webpack -p    //压缩混淆脚本，这个非常非常重要！</div><div class="line"> </div><div class="line">$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了</div></pre></td></tr></table></figure>
<h6 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h6><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">webpack-dev-server是一个小型的node.js Express服务器,它使用webpack-dev-middleware中间件来为通过webpack打包生成的资源文件提供Web服务。它还有一个通过Socket.IO连接着webpack-dev-server服务器的小型运行时程序。webpack-dev-server发送关于编译状态的消息到客户端，客户端根据消息作出响应。</div></pre></td></tr></table></figure>
<p>webpack-dev-server有两种模式支持自动刷新——iframe模式和inline模式</p>
<p>在iframe模式下：页面是嵌套在一个iframe下的，在代码发生改动的时候，这个iframe会重新加载<br>在inline模式下：一个小型的webpack-dev-server客户端会作为入口文件打包，这个客户端会在后端代码改变的时候刷新页面<br>使用iframe模式，无需额外配置，只需在浏览器输入</p>
<p><a href="http://localhost:8080/webpack-dev-server/index.html" target="_blank" rel="external">http://localhost:8080/webpack-dev-server/index.html</a><br>使用inline模式有两种方式：命令行和nodejs API</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">命令行： 在运行时，加上 --inline 选项</div><div class="line"></div><div class="line">$ webpack-dev-server --inline</div><div class="line">访问，通过http://localhost:8080 就可以访问</div></pre></td></tr></table></figure>
<p>nodejs API 方式 ，需要手动把 webpack-dev-server/client?<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 加到配置文件的入口文件处</p>
<p>webpac-dev-server支持Hot Module Replacement，即模块热替换，在前端代码变动的时候无需整个刷新页面，只把变化的部分替换掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">依赖的包文件，复制安装</div><div class="line"></div><div class="line">npm install webpack@1.x.x webpack-dev-server autoprefixer babel babel-core babel-loader babel-preset-es2015 extract-text-webpack-plugin file file-loader fs html-webpack-plugin node-sass css-loader html-loader image-webpack-loader path sass-loader less  less-loader style-loader url-loader postcss-loader jquery@2.x.x --save-dev</div><div class="line"></div><div class="line"></div><div class="line">npm install glob html-loader image-webpack-loader --save-dev</div><div class="line"></div><div class="line">npm install node-sass sass-loader --save-dev</div></pre></td></tr></table></figure>
<h1 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h1><blockquote>
<p>目录结构</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/**</div><div class="line"> * xuess</div><div class="line"> * webpack配置</div><div class="line"> */</div><div class="line">var path = require(&apos;path&apos;),</div><div class="line">	webpack = require(&apos;webpack&apos;),</div><div class="line">	//打包html</div><div class="line">	HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;),</div><div class="line">	//独立打包样式文件</div><div class="line">	ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;),</div><div class="line">	//公共模块单独打包</div><div class="line">	CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin,</div><div class="line">	ROOT_PATH = path.resolve(__dirname),//根目录</div><div class="line">	OUT_PATH = &quot;./dist/&quot;,//输出目录</div><div class="line">	ALIAS_IGNORE_DIRS = [&quot;&quot;],//忽略目录</div><div class="line">	ENTRY_IGNORE_DIRS = [&quot;commons&quot;], //忽略目录</div><div class="line">	alias = require(&apos;./config/alias&apos;),</div><div class="line">	entry = require(&apos;./config/entry&apos;);</div><div class="line"></div><div class="line">alias.init(ROOT_PATH, [&quot;/src/js/commons&quot;], ALIAS_IGNORE_DIRS);</div><div class="line">entry.init(ROOT_PATH, [&quot;/src/js&quot;], ENTRY_IGNORE_DIRS);</div><div class="line"></div><div class="line">var extractCSS = new ExtractTextPlugin(&apos;css/[name].css?[contenthash]&apos;)</div><div class="line">var cssLoader = extractCSS.extract([&apos;css&apos;])</div><div class="line">var sassLoader = extractCSS.extract([&apos;css&apos;, &apos;sass&apos;])</div><div class="line">var lessLoader = extractCSS.extract([&apos;css&apos;, &apos;less&apos;])</div><div class="line">//插件配置</div><div class="line">var plugins = [];</div><div class="line">plugins.push(extractCSS);</div><div class="line">///webpack.ProvidePlugin插件作用是jquery变成全局，所以不需要引用就能在js文件中运用</div><div class="line">plugins.push(new webpack.ProvidePlugin(&#123;</div><div class="line">	&quot;jQuery&quot;: &quot;jquery&quot;,</div><div class="line">	&quot;$&quot;: &quot;jquery&quot;</div><div class="line">&#125;));</div><div class="line">plugins.push(new CommonsChunkPlugin(&#123;</div><div class="line">	name: &apos;libs&apos;,</div><div class="line">	minChunks: Infinity</div><div class="line">&#125;));</div><div class="line">plugins.push(new webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">	mangle: &#123;</div><div class="line">		except: [&apos;$&apos;, &apos;jQuery&apos;]</div><div class="line">	&#125;,</div><div class="line">	// sourceMap: false,</div><div class="line">	compress: &#123;</div><div class="line">		warnings: false</div><div class="line">	&#125;</div><div class="line">&#125;));</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">	//devtool: &quot;source-map&quot;,</div><div class="line">	resolve: &#123;</div><div class="line">		//参数名的自动补全，现在可以写 require(&apos;file&apos;) 代替 require(&apos;file.js&apos;)</div><div class="line">		extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.coffee&apos;, &apos;.css&apos;, &apos;.jsx&apos;, &apos;.vue&apos;],</div><div class="line">		//解析目录名的一个数组到当前目录以及先前的目录，并且是查找模块。</div><div class="line">		modulesDirectories: [&apos;node_modules&apos;],</div><div class="line">		//设置别名，便于在开发中模块的使用</div><div class="line">		alias: alias.getAlias(&#123;</div><div class="line">			jquery: path.resolve(ROOT_PATH, &quot;./node_modules/jquery/dist/jquery.min.js&quot;),</div><div class="line">			md5: path.resolve(ROOT_PATH, &quot;./node_modules/md5/md5.js&quot;)</div><div class="line">		&#125;),</div><div class="line">		//绝对路径</div><div class="line">		publicPath: &apos;/&apos;</div><div class="line">	&#125;,</div><div class="line">	entry: entry.getEntrys(&#123; &apos;libs&apos;: [&apos;jquery&apos;] &#125;),</div><div class="line">	output: &#123;</div><div class="line">		path: OUT_PATH, //文件输出目录</div><div class="line">		publicPath: OUT_PATH, //用于配置文件发布路径，如CDN或本地服务器</div><div class="line">		filename: &apos;js/[name].js&apos; //根据入口文件输出的对应多个文件名</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">		loaders: [</div><div class="line">			&#123; test: /\.css$/, loader: cssLoader &#125;,</div><div class="line">			&#123; test: /\.scss$/, loader: sassLoader &#125;,</div><div class="line">			&#123; test: /\.less$/, loader: lessLoader &#125;,</div><div class="line">			&#123; test: /\.(png|jpg)$/, loader: &apos;url-loader&apos; &#125;,</div><div class="line">			&#123; test: /\.vue$/, loader: &apos;vue-loader&apos; &#125;,</div><div class="line">			&#123; test: /\.html$/, loader: &apos;html&apos; &#125;</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	plugins: plugins</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[blogs]]></title>
      <url>http://xueshanshan.com/2017/02/23/blogs/</url>
      <content type="html"><![CDATA[<h2 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h2><ul>
<li>你好。</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[vue]]></title>
      <url>http://xueshanshan.com/2017/02/23/vue/</url>
      <content type="html"><![CDATA[<h2 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">这个是测试语句块！！！</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://xueshanshan.com/2016/06/03/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
